services:
  backend:
    restart: always
    networks:
      - pennypal-net
    build:
      context: ./pennypal-back
      dockerfile: Dockerfile.prod
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=${MSSQL_URL}
      - AppSettings__TokenKey=${TOKEN_KEY}
      - AppSettings__PasswordKey=${PASSWORD_KEY}
    depends_on:
      db:
        condition: service_healthy

  db:
    restart: always
    networks:
      - pennypal-net
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: ${MSSQL_PASSWORD}
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - sqlserverdata:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep -v grep | grep sqlservr > /dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s


  db-init:
    networks:
      - pennypal-net
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./pennypal-back/Scripts:/scripts
      - ./pennypal-back/Sql:/tmp/sql
    working_dir: /scripts
    entrypoint: /bin/bash
    command: ./init-db.sh
    environment:
      - MSSQL_SERVER=${MSSQL_SERVER}
      - MSSQL_USER=${MSSQL_USER}
      - MSSQL_PASSWORD=${MSSQL_PASSWORD}

  frontend:
    restart: always
    networks:
      - pennypal-net
    build:
      context: ./pennypal-front
      dockerfile: Dockerfile.prod
    environment:
      VITE_API_URL: ${VITE_API_URL}
    volumes:
      - build:/app/dist
    depends_on:
      - backend

  nginx:
    restart: always
    networks:
      - pennypal-net
    image: nginx:alpine
    depends_on:
      - frontend
      - backend
    ports:
      - "8080:80"
    volumes:
      - build:/usr/share/nginx/html:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro

networks:
  pennypal-net:
    driver: bridge

volumes:
  sqlserverdata: 
  build: 
